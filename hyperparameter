# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.svm import SVR
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Create a synthetic dataset to mimic car price data
np.random.seed(42)
data = {
    'age': np.random.randint(1, 15, 1000),
    'mileage': np.random.randint(5000, 200000, 1000),
    'horsepower': np.random.randint(70, 400, 1000),
    'brand': np.random.choice(['Toyota', 'Ford', 'BMW', 'Mercedes', 'Audi'], 1000),
    'fuel_type': np.random.choice(['Petrol', 'Diesel'], 1000),
    'price': np.random.randint(5000, 50000, 1000)
}

df = pd.DataFrame(data)

# Separate features and target variable
X = df.drop('price', axis=1)
y = df['price']

# Step 2: Define preprocessing for numerical and categorical data
numerical_features = ['age', 'mileage', 'horsepower']
categorical_features = ['brand', 'fuel_type']

# Create the column transformer
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_features),
        ('cat', OneHotEncoder(), categorical_features)
    ])

# Step 3: Create the pipeline
pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('model', SVR())
])

# Step 4: Define the parameter grid for Grid Search
param_grid = {
    'model__C': [0.1, 1, 10, 100],
    'model__kernel': ['linear', 'rbf', 'poly'],
    'model__gamma': ['scale', 'auto']
}

# Step 5: Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 6: Set up Grid Search with cross-validation
grid_search = GridSearchCV(estimator=pipeline, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error', verbose=2)

# Fit the model
grid_search.fit(X_train, y_train)

# Step 7: Print the best parameters
print(f"Best parameters found: {grid_search.best_params_}")

# Evaluate the best model on the test set
best_model = grid_search.best_estimator_
y_pred = best_model.predict(X_test)
print(f"Mean Squared Error on test set: {mean_squared_error(y_test, y_pred):.2f}")

# Step 8: Extract only relevant columns and pivot without aggregation issues
results = pd.DataFrame(grid_search.cv_results_)
pivot_table = results.pivot_table(values='mean_test_score', 
                                  index='param_model__C', 
                                  columns='param_model__kernel', 
                                  aggfunc=np.mean)

# Since mean_test_score is negative (because of neg_mean_squared_error), we take its absolute value
pivot_table = pivot_table.applymap(lambda x: -x)

# Step 9: Plot the heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(pivot_table, annot=True, fmt=".2f", cmap="YlGnBu", cbar_kws={'label': 'Mean Squared Error'})
plt.title('Grid Search MSE for Different Hyperparameters')
plt.xlabel('Kernel')
plt.ylabel('C')
plt.show()
